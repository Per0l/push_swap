
int	get_smallest_arr(t_list *stack)
{
	int		i;
	int		j;
	int		nbr;

	nbr = INT32_MAX;
	i = -1;
	j = 0;
	while (i++ < (stack->size - 1) / 2)
	{
		if (stack->arr[i] < nbr)
		{
			nbr = stack->arr[i];
			j = i;
		}
		if (stack->arr[stack->size - i - 1] < nbr)
		{
			nbr = stack->arr[stack->size - i - 1];
			j = stack->size - i - 1;
		}
	}
	return (j);
}

void	final_solver(t_stack *stack)
{
	int	swap;
	int	big_idx;
	int	small_idx;
	int	rots;
	int	inv;

	inv = stack->b.size;
	rots = 0;
	while (stack->b.size > 0)
	{
		big_idx = get_biggest_arr(&stack->b);
		small_idx = get_smallest_arr(&stack->b);
		if (normalize_idx(big_idx, stack->b.size) <= normalize_idx(small_idx, stack->b.size))
		{
			swap = get_nbr(stack, &stack->b, big_idx, 1);
			ps_exec(stack, "pa");
			if (swap)
				ps_exec(stack, "sa");
		}
		else
		{
			swap = get_nbr(stack, &stack->b, small_idx, 0);
			ps_exec(stack, "pa");
			ps_exec(stack, "ra");
			if (swap)
				ps_exec(stack, "ra");
			rots += swap + 1;
		}
	}
	rev_rots(stack, 'a', -1*(inv - rots));
}

void	calc_chunks(t_stack *stack, int factor)
{
	int	chunk_size;
	int	i;

	chunk_size = stack->a.size / factor;
	i = 0;
	while (i++ < factor)
	{
		if (i == factor - 1)
			chunk_size += stack->a.size - (factor * chunk_size);
		ft_lstadd_front(&stack->chunks, ft_lstnew(chunk_size, 'a'));
		arr_dup(stack->chunks.list->s_arr,
			stack->sorted + stack->a.size - (chunk_size * i), chunk_size);
	}
}

void	rev_rots(t_stack *stack, char col, int n)
{
	char	cmd[4];
	char	*cmd_p;
	int		i;

	cmd[0] = 'r';
	cmd[1] = 'r';
	cmd[2] = col;
	cmd[3] = '\0';
	cmd_p = cmd;
	if (n < 0)
	{
		cmd_p++;
		n *= -1;
	}
	i = -1;
	while (i++ < n - 1)
		ps_exec(stack, cmd_p);
}

int	get_biggest_arr(t_list *stack)
{
	int		i;
	int		j;
	int		nbr;

	nbr = INT32_MIN;
	i = -1;
	j = 0;
	while (i++ < (stack->size - 1) / 2)
	{
		if (stack->arr[i] > nbr)
		{
			nbr = stack->arr[i];
			j = i;
		}
		if (stack->arr[stack->size - i - 1] > nbr)
		{
			nbr = stack->arr[stack->size - i - 1];
			j = stack->size - i - 1;
		}
	}
	return (j);
}